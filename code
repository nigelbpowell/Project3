.data
numbers: .byte 1 2 3 4 5
sum_header: .asciiz "array sum: "
inputTooLong: .asciiz "Input is too long."
baseInvalid: .asciiz "Invalid base-34 number." 
inputEmpty: .asciiz "Input is empty."
stringInput: .space 40000
.text

main:
li $v0, 8  
la $a0, stringInput
li $a1, 40000
syscall
add $t1, $0, 0 
add $t3, $0, 0 
add $t7, $0, 2
la $t0, stringInput			
lb $t1,0($t0) 					
beq $t1, 10, emptyInputError 	
beq $t1, 0 emptyInputError
addi $s0, $0, 34 	
addi $t4, $0, 1 	
addi $t5, $0, 0 	
addi $t6, $0, 0

addi $sp, $sp, -4
sw $ra, 0($sp)
li $v0, 4	#print sum_header
la $a0, sum_header
syscall
	
la $a0, numbers	#set arr addr
li $a1, 5	#set arr length
jal sum

skipSpaces:
	lb $t1,0($t0)
	addi $t0, $t0, 1
	addi $t3, $t3, 1
	beq $t1, 32, skipSpaces
	beq $t1, 10, emptyInputError
	beq $t1, $0, emptyInputError
showChars:
	lb $t1,0($t0)
	addi $t0, $t0, 1
	addi $t3, $t3, 1
	beq $t1, 10, backToBeginning
	beq $t1, 0, backToBeginning
	bne $t1, 32, showChars
showCharsOrSpaces:
	lb $t1,0($t0)
	addi $t0, $t0, 1
	addi $t3, $t3, 1
	beq $t1, 10, backToBeginning
	beq $t1, 0, backToBeginning
	bne $t1, 32, invalidBaseError
	j showCharsOrSpaces
backToBeginning:
	sub $t0, $t0, $t3 	
	la $t3, 0 
advanceForward:
	lb $t1,0($t0)
	addi $t0, $t0, 1
	beq $t1, 32, advanceForward
	
addi $t0, $t0, -1

lengthFinder:
	lb $t1, ($t0)
	addi $t0, $t0, 1
	addi $t3, $t3, 1 
	beq $t1, 10, doMisc
	beq $t1, 0, doMisc
	beq $t1, 32, doMisc
	beq $t3, 5, longInputError
	j lengthFinder
doMisc:
	sub $t0, $t0, $t3
	sub $t3, $t3, $t4
	lb $t1, ($t0)
	sub $s1, $t3, $t4
greatestPowerFinder:	
	beq $s1, 0, AsciiConvert		
	mult $t4, $s0
	mflo $t4
	sub $s1, $s1, 1
	j greatestPowerFinder
multiply:
	mult $t1, $t4
	mflo $t5		
	add $t6, $t6, $t5 	
	beq $t4, 1, Exit
	div $t4, $s0 
	mflo $t4
	add $t0, $t0, 1
	lb $t1,0($t0)
	j AsciiConvert
Exit:
	move $a0, $t6 
	li $v0, 1 
	syscall
	li $v0,10 
	syscall
AsciiConvert:
	blt $t1, 48, invalidBaseError
	blt $t1, 58, Number 
	blt $t1, 65, invalidBaseError 
	blt $t1, 89, upperCase 
	blt $t1, 97, invalidBaseError 
	blt $t1, 121, lowerCase 
	blt $t1, 128, invalidBaseError 
upperCase:
	addi $t1, $t1, -55 
	j multiply 			
lowerCase:
	addi $t1, $t1, -87 	
	j multiply				
Number:
	addi $t1, $t1, -48 	
	j multiply
emptyInputError:
	la $a0, inputEmpty 
	li $v0, 4 
	syscall
	li $v0,10 
	syscall
longInputError:
	la $a0, inputTooLong 
	li $v0, 4 		
	syscall
	li $v0,10 
	syscall
invalidBaseError:
	la $a0, baseInvalid 
	li $v0, 4 
	syscall
	li $v0,10 
	syscall	 

	jr $ra	
